/*
 * The MIT License
 *
 * Copyright 2019 bschorn.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.schorn.ella.ws.api;

@Path("/html")
@Consumes()
@Produces({"text/html"})

/**
 *
 * @author schorn
 *
 */
public class DataGetHtml {

    @Context
    private HttpHeaders headers;

    @GET
    @Path("/echo/{echo_str}")
    public Response getEcho(
            @PathParam("echo_str") String echo_str
    ) {
        API.Request request = API.createRequest(headers, API.Action.TEST_ECHO, API.Method.GET, API.ContentType.HTML);
        request.set(API.Parameter.VALUE, echo_str);
        return API.getResponseAsBuilder(request).build();
    }

    @OPTIONS
    @Path("/echo/{echo_str}")
    public Response optionsEcho(
            @PathParam("echo_str") String echo_str
    ) {
        return API.doPreflight(headers).build();
    }

    /*
	@GET
	@Path("/")
	public Response get() {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(ActionCategory.PAGE, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.HTML_PAGE, "data_start_page.html");
		//return ServiceAPIHandlers.servePage(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}
	
	@GET
	@Path("/view")
	public Response getViewerPage() {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(ActionCategory.PAGE, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.HTML_PAGE, "data_view_page.html");
		//return ServiceAPIHandlers.servePage(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

	@GET
	@Path("/edit")
	public Response getUpdatePage() {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(ActionCategory.PAGE, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.HTML_PAGE, "data_edit_page.html");
		//return ServiceAPIHandlers.servePage(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

	@GET
	@Path("/test")
	public Response getTestPage() {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(ActionCategory.PAGE, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.HTML_PAGE, "data_test_page.html");
		//return ServiceAPIHandlers.servePage(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

	@GET
	@Path("/upload/{context}/{file_type}")
	public Response getUploadPage(
			@PathParam("context") String context,
			@PathParam("file_type") String file_type
			) {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(ActionCategory.PAGE, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.CONTEXT, context);
		parameters.set(EntityType.FILE_TYPE, file_type);
		parameters.set(APIUtil.Param.HTML_PAGE, "data_upload_page.html");
		//return ServiceAPIHandlers.serveContextPage(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
}
     */
 /*
	 * 
	@GET
	@Path("/list/{context}/{object_type}")
	public Response getListContextObjectTypeValueType(
			@PathParam("context") String context,
			@PathParam("object_type") String object_type
			) {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(Action.DATA_LIST, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.CONTEXT, context);
		parameters.set(EntityType.OBJECT_TYPE, object_type);
		//return ServiceAPIHandlers.getList(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

	@GET
	@Path("/list/{context}/{object_type}/{value_type}")
	public Response getListContextObjectTypeValueType(
			@PathParam("context") String context,
			@PathParam("object_type") String object_type,
			@PathParam("value_type") String value_type
			) {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(Action.DATA_LIST, Method.GET, ContentType.HTML);
		parameters.set(APIUtil.Param.CONTEXT, context);
		parameters.set(EntityType.OBJECT_TYPE, object_type);
		parameters.set(EntityType.VALUE_TYPE, value_type);
		//return ServiceAPIHandlers.getList(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

     */
    @GET
    @Path("/query/{context}/{object_type}/{value_type}/{value}")
    public Response getResults(
            @PathParam("context") String context,
            @PathParam("object_type") String object_type,
            @PathParam("value_type") String value_type,
            @PathParam("value") String value
    ) {
        API.Request request = API.createRequest(headers, API.Action.DATA_QUERY, API.Method.GET, API.ContentType.HTML);
        request.set(API.Parameter.CONTEXT, context);
        request.set(API.Parameter.OBJECT_TYPE, object_type);
        request.set(API.Parameter.VALUE_TYPE, value_type);
        request.set(API.Parameter.VALUE, value);
        return API.getResponseAsBuilder(request).build();
    }

    @OPTIONS
    @Path("/query/{context}/{object_type}/{value_type}/{value}")
    public Response optionsResults(
            @PathParam("context") String context,
            @PathParam("object_type") String object_type,
            @PathParam("value_type") String value_type,
            @PathParam("value") String value
    ) {
        return API.doPreflight(headers).build();
    }

    /*
	 * CORS
     */
 /*
	@OPTIONS
	@Path("/list/{context}/{object_type}")
	public Response optionsList(
			@PathParam("context") String context,
			@PathParam("object_type") String object_type
			) {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(Action.DATA_LIST, Method.OPTIONS, ContentType.HTML);
		parameters.set(APIUtil.Param.CONTEXT, context);
		//return ServiceAPIHandlers.doPreflight(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}

	@OPTIONS
	@Path("/list/{context}/{object_type}/{value_type}")
	public Response optionsList(
			@PathParam("context") String context,
			@PathParam("object_type") String object_type,
			@PathParam("value_type") String value_type
			) {
		APIUtil.Parameters parameters = APIUtil.Parameters.create(Action.DATA_LIST, Method.OPTIONS, ContentType.HTML);
		parameters.set(APIUtil.Param.CONTEXT, context);
		//return ServiceAPIHandlers.doPreflight(headers, parameters).build();
		return ServiceHandler.HANDLE(headers, parameters).build();
	}
     */
}
